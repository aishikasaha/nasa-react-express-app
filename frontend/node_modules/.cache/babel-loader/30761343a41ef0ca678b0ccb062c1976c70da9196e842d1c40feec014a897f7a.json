{"ast":null,"code":"class AIService {\n  constructor() {\n    this.HF_API_URL = 'https://api-inference.huggingface.co/models';\n    this.API_TOKEN = process.env.REACT_APP_HF_API_TOKEN;\n    this.isLoading = false;\n  }\n  async analyzeImage(imageUrl) {\n    try {\n      var _data$;\n      this.isLoading = true;\n\n      // Check if token exists\n      if (!this.API_TOKEN) {\n        console.warn('No Hugging Face API token found');\n        return 'AI analysis requires API token';\n      }\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      const result = await fetch(`${this.HF_API_URL}/Salesforce/blip-image-captioning-large`, {\n        method: 'POST',\n        body: blob,\n        headers: {\n          'Content-Type': 'application/octet-stream',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        }\n      });\n      const data = await result.json();\n      return ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.generated_text) || 'Unable to analyze image';\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return 'AI analysis temporarily unavailable';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  async summarizeText(text, maxLength = 100) {\n    try {\n      var _data$2;\n      if (text.length < maxLength) return text;\n      const response = await fetch(`${this.HF_API_URL}/facebook/bart-large-cnn`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        },\n        body: JSON.stringify({\n          inputs: text,\n          parameters: {\n            max_length: maxLength,\n            min_length: 20\n          }\n        })\n      });\n      const data = await response.json();\n      return ((_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.summary_text) || text;\n    } catch (error) {\n      console.error('AI Summarization Error:', error);\n      return text;\n    }\n  }\n  async analyzeSentiment(text) {\n    try {\n      const response = await fetch(`${this.HF_API_URL}/cardiffnlp/twitter-roberta-base-sentiment-latest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        },\n        body: JSON.stringify({\n          inputs: text\n        })\n      });\n      const data = await response.json();\n      return data[0] || {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    } catch (error) {\n      console.error('AI Sentiment Analysis Error:', error);\n      return {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    }\n  }\n}","map":{"version":3,"names":["AIService","constructor","HF_API_URL","API_TOKEN","process","env","REACT_APP_HF_API_TOKEN","isLoading","analyzeImage","imageUrl","_data$","console","warn","response","fetch","blob","result","method","body","headers","data","json","generated_text","error","summarizeText","text","maxLength","_data$2","length","JSON","stringify","inputs","parameters","max_length","min_length","summary_text","analyzeSentiment","label","score"],"sources":["/Users/aishikasaha/Documents/nasa-react-express-app/frontend/src/services/aiService.js"],"sourcesContent":["class AIService {\n  constructor() {\n    this.HF_API_URL = 'https://api-inference.huggingface.co/models';\n    this.API_TOKEN = process.env.REACT_APP_HF_API_TOKEN;\n    this.isLoading = false;\n  }\n\n  async analyzeImage(imageUrl) {\n    try {\n      this.isLoading = true;\n      \n      // Check if token exists\n      if (!this.API_TOKEN) {\n        console.warn('No Hugging Face API token found');\n        return 'AI analysis requires API token';\n      }\n      \n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      \n      const result = await fetch(`${this.HF_API_URL}/Salesforce/blip-image-captioning-large`, {\n        method: 'POST',\n        body: blob,\n        headers: {\n          'Content-Type': 'application/octet-stream',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        }\n      });\n      \n      const data = await result.json();\n      return data[0]?.generated_text || 'Unable to analyze image';\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return 'AI analysis temporarily unavailable';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async summarizeText(text, maxLength = 100) {\n    try {\n      if (text.length < maxLength) return text;\n      \n      const response = await fetch(`${this.HF_API_URL}/facebook/bart-large-cnn`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        },\n        body: JSON.stringify({\n          inputs: text,\n          parameters: { max_length: maxLength, min_length: 20 }\n        })\n      });\n      \n      const data = await response.json();\n      return data[0]?.summary_text || text;\n    } catch (error) {\n      console.error('AI Summarization Error:', error);\n      return text;\n    }\n  }\n\n  async analyzeSentiment(text) {\n    try {\n      const response = await fetch(`${this.HF_API_URL}/cardiffnlp/twitter-roberta-base-sentiment-latest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.API_TOKEN}` // Add this line\n        },\n        body: JSON.stringify({ inputs: text })\n      });\n      \n      const data = await response.json();\n      return data[0] || { label: 'NEUTRAL', score: 0.5 };\n    } catch (error) {\n      console.error('AI Sentiment Analysis Error:', error);\n      return { label: 'NEUTRAL', score: 0.5 };\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}