{"ast":null,"code":"import { Howl } from 'howler';\nclass SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.volume = 0.3;\n    this.enabled = true;\n\n    // Initialize sounds\n    this.loadSounds();\n  }\n  loadSounds() {\n    // Create sound effects using Web Audio API\n    this.sounds = {\n      click: this.createTone(800, 0.1),\n      hover: this.createTone(600, 0.05),\n      success: this.createTone([523, 659, 784], 0.3),\n      error: this.createTone([400, 300], 0.2),\n      whoosh: this.createWhiteNoise(0.1),\n      space: this.createSpaceAmbient()\n    };\n  }\n  createTone(frequencies, duration) {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const freqArray = Array.isArray(frequencies) ? frequencies : [frequencies];\n      freqArray.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'sine';\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.1, audioContext.currentTime + 0.01);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n        oscillator.start(audioContext.currentTime + index * 0.1);\n        oscillator.stop(audioContext.currentTime + duration + index * 0.1);\n      });\n    };\n  }\n  createWhiteNoise(duration) {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const bufferSize = audioContext.sampleRate * duration;\n      const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n      const output = buffer.getChannelData(0);\n      for (let i = 0; i < bufferSize; i++) {\n        output[i] = Math.random() * 2 - 1;\n      }\n      const whiteNoise = audioContext.createBufferSource();\n      const gainNode = audioContext.createGain();\n      whiteNoise.buffer = buffer;\n      whiteNoise.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      gainNode.gain.setValueAtTime(this.volume * 0.05, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n      whiteNoise.start();\n    };\n  }\n  createSpaceAmbient() {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator1 = audioContext.createOscillator();\n      const oscillator2 = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator1.connect(gainNode);\n      oscillator2.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      oscillator1.frequency.setValueAtTime(110, audioContext.currentTime);\n      oscillator2.frequency.setValueAtTime(165, audioContext.currentTime);\n      oscillator1.type = 'sine';\n      oscillator2.type = 'triangle';\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(this.volume * 0.02, audioContext.currentTime + 1);\n      gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 3);\n      oscillator1.start();\n      oscillator2.start();\n      oscillator1.stop(audioContext.currentTime + 3);\n      oscillator2.stop(audioContext.currentTime + 3);\n    };\n  }\n  play(soundName) {\n    if (this.sounds[soundName] && this.enabled) {\n      this.sounds[soundName]();\n    }\n  }\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n  }\n  toggle() {\n    this.enabled = !this.enabled;\n    return this.enabled;\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n}\nexport default new SoundManager();","map":{"version":3,"names":["Howl","SoundManager","constructor","sounds","volume","enabled","loadSounds","click","createTone","hover","success","error","whoosh","createWhiteNoise","space","createSpaceAmbient","frequencies","duration","audioContext","window","AudioContext","webkitAudioContext","freqArray","Array","isArray","forEach","freq","index","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","bufferSize","sampleRate","buffer","createBuffer","output","getChannelData","i","Math","random","whiteNoise","createBufferSource","oscillator1","oscillator2","play","soundName","setVolume","max","min","toggle","isEnabled"],"sources":["/Users/aishikasaha/Downloads/react-nasa-api-master copy/frontend/src/utils/soundManager.js"],"sourcesContent":["import { Howl } from 'howler';\n\nclass SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.volume = 0.3;\n    this.enabled = true;\n    \n    // Initialize sounds\n    this.loadSounds();\n  }\n\n  loadSounds() {\n    // Create sound effects using Web Audio API\n    this.sounds = {\n      click: this.createTone(800, 0.1),\n      hover: this.createTone(600, 0.05),\n      success: this.createTone([523, 659, 784], 0.3),\n      error: this.createTone([400, 300], 0.2),\n      whoosh: this.createWhiteNoise(0.1),\n      space: this.createSpaceAmbient()\n    };\n  }\n\n  createTone(frequencies, duration) {\n    return () => {\n      if (!this.enabled) return;\n      \n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const freqArray = Array.isArray(frequencies) ? frequencies : [frequencies];\n      \n      freqArray.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        \n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'sine';\n        \n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.1, audioContext.currentTime + 0.01);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n        \n        oscillator.start(audioContext.currentTime + index * 0.1);\n        oscillator.stop(audioContext.currentTime + duration + index * 0.1);\n      });\n    };\n  }\n\n  createWhiteNoise(duration) {\n    return () => {\n      if (!this.enabled) return;\n      \n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const bufferSize = audioContext.sampleRate * duration;\n      const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);\n      const output = buffer.getChannelData(0);\n      \n      for (let i = 0; i < bufferSize; i++) {\n        output[i] = Math.random() * 2 - 1;\n      }\n      \n      const whiteNoise = audioContext.createBufferSource();\n      const gainNode = audioContext.createGain();\n      \n      whiteNoise.buffer = buffer;\n      whiteNoise.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      gainNode.gain.setValueAtTime(this.volume * 0.05, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n      \n      whiteNoise.start();\n    };\n  }\n\n  createSpaceAmbient() {\n    return () => {\n      if (!this.enabled) return;\n      \n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator1 = audioContext.createOscillator();\n      const oscillator2 = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator1.connect(gainNode);\n      oscillator2.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator1.frequency.setValueAtTime(110, audioContext.currentTime);\n      oscillator2.frequency.setValueAtTime(165, audioContext.currentTime);\n      oscillator1.type = 'sine';\n      oscillator2.type = 'triangle';\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(this.volume * 0.02, audioContext.currentTime + 1);\n      gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 3);\n      \n      oscillator1.start();\n      oscillator2.start();\n      oscillator1.stop(audioContext.currentTime + 3);\n      oscillator2.stop(audioContext.currentTime + 3);\n    };\n  }\n\n  play(soundName) {\n    if (this.sounds[soundName] && this.enabled) {\n      this.sounds[soundName]();\n    }\n  }\n\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n  }\n\n  toggle() {\n    this.enabled = !this.enabled;\n    return this.enabled;\n  }\n\n  isEnabled() {\n    return this.enabled;\n  }\n}\n\nexport default new SoundManager();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}