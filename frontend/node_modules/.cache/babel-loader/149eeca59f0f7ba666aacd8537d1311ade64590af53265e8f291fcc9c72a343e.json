{"ast":null,"code":"// AI Service that uses backend proxy to avoid CORS issues\nclass AIService {\n  constructor() {\n    this.backendURL = 'http://localhost:5000';\n    this.isLoading = false;\n  }\n\n  // Image analysis using backend proxy\n  async analyzeImage(imageUrl, description = '') {\n    try {\n      this.isLoading = true;\n\n      // Call your backend instead of external APIs\n      const response = await fetch(`${this.backendURL}/api/analyze-image`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl,\n          description\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        return result.data;\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return {\n        imageAnalysis: 'AI analysis temporarily unavailable',\n        sentiment: {\n          label: 'NEUTRAL',\n          score: 0.5\n        },\n        summary: description || 'Unable to analyze image',\n        complexity: {\n          wordCount: 0,\n          complexity: 'Unknown'\n        },\n        tips: ['AI analysis is currently unavailable']\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Local browser-based text analysis (no API needed)\n  analyzeTextComplexity(text) {\n    if (!text) return {\n      wordCount: 0,\n      sentenceCount: 0,\n      avgWordsPerSentence: 0,\n      complexity: 'Unknown'\n    };\n    const words = text.split(/\\s+/).filter(word => word.length > 0).length;\n    const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0).length;\n    const avgWordsPerSentence = sentences > 0 ? words / sentences : 0;\n    let complexity = 'Simple';\n    if (avgWordsPerSentence > 15) complexity = 'Moderate';\n    if (avgWordsPerSentence > 25) complexity = 'Complex';\n    return {\n      wordCount: words,\n      sentenceCount: sentences,\n      avgWordsPerSentence: Math.round(avgWordsPerSentence * 10) / 10,\n      complexity\n    };\n  }\n\n  // Generate astronomy-related suggestions\n  generateAstronomyTips(topic = '') {\n    const tips = {\n      nebula: [\"🔭 Try viewing nebulae with different filters to see various elements\", \"🌟 Nebulae are stellar nurseries where new stars are born\", \"📊 The colors in nebulae indicate different chemical elements\"],\n      galaxy: [\"🌌 Our Milky Way contains over 100 billion stars\", \"🔄 Galaxies rotate, with spiral arms moving like waves\", \"🎯 Look for the galaxy's central black hole in deep images\"],\n      planet: [\"🪐 Each planet has unique atmospheric conditions\", \"🌡️ Temperature varies greatly across planetary surfaces\", \"🔍 Study surface features to understand geological history\"],\n      mars: [\"🚀 Mars has the largest volcano in the solar system\", \"❄️ Mars has polar ice caps made of water and dry ice\", \"🌪️ Dust storms on Mars can last for months\"],\n      meteor: [\"☄️ Most meteors are tiny particles that burn up in our atmosphere\", \"🌌 Meteor showers occur when Earth passes through comet debris\", \"📅 Annual meteor showers happen at predictable times\"],\n      satellite: [\"🛰️ Satellites appear as moving points of light in the night sky\", \"🕐 The International Space Station is visible to the naked eye\", \"📡 Many satellites are in geostationary orbit above the equator\"],\n      default: [\"⭐ Use dark sky locations for better astronomical viewing\", \"📱 Try astronomy apps to identify objects in the night sky\", \"🌙 The best viewing is often just after sunset or before sunrise\"]\n    };\n    const topicLower = topic.toLowerCase();\n    const key = Object.keys(tips).find(k => topicLower.includes(k)) || 'default';\n    return tips[key];\n  }\n\n  // Mock sentiment analysis\n  analyzeSentiment(text) {\n    if (!text) return {\n      label: 'NEUTRAL',\n      score: 0.5\n    };\n    const positiveWords = ['beautiful', 'amazing', 'spectacular', 'stunning', 'magnificent', 'wonderful'];\n    const negativeWords = ['dark', 'void', 'empty', 'cold', 'distant'];\n    const textLower = text.toLowerCase();\n    const positiveCount = positiveWords.filter(word => textLower.includes(word)).length;\n    const negativeCount = negativeWords.filter(word => textLower.includes(word)).length;\n    if (positiveCount > negativeCount) {\n      return {\n        label: 'POSITIVE',\n        score: 0.7 + positiveCount * 0.1\n      };\n    } else if (negativeCount > positiveCount) {\n      return {\n        label: 'NEGATIVE',\n        score: 0.3 - negativeCount * 0.1\n      };\n    } else {\n      return {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    }\n  }\n\n  // Simple text summarization\n  summarizeText(text, maxLength = 100) {\n    if (!text || text.length <= maxLength) return text;\n\n    // Simple truncation with word boundary\n    const truncated = text.substring(0, maxLength);\n    const lastSpace = truncated.lastIndexOf(' ');\n    if (lastSpace > maxLength * 0.8) {\n      return truncated.substring(0, lastSpace) + '...';\n    } else {\n      return truncated + '...';\n    }\n  }\n\n  // Check if AI services are available\n  isAvailable() {\n    return true; // Using mock/local analysis, always available\n  }\n\n  // Comprehensive analysis combining all methods\n  async comprehensiveAnalysis(imageUrl, description = '', title = '') {\n    try {\n      const analysisText = `${title} ${description}`.trim();\n\n      // Use local analysis methods\n      const complexity = this.analyzeTextComplexity(analysisText);\n      const sentiment = this.analyzeSentiment(analysisText);\n      const summary = this.summarizeText(description, 150);\n      const tips = this.generateAstronomyTips(analysisText);\n      return {\n        imageAnalysis: `Analysis of \"${title}\": This astronomical image showcases ${summary}`,\n        sentiment,\n        summary,\n        complexity,\n        tips,\n        metadata: {\n          hasImage: !!imageUrl,\n          hasDescription: !!description,\n          hasTitle: !!title,\n          analysisMethod: 'local'\n        }\n      };\n    } catch (error) {\n      console.error('Comprehensive analysis error:', error);\n      return {\n        imageAnalysis: 'Analysis temporarily unavailable',\n        sentiment: {\n          label: 'NEUTRAL',\n          score: 0.5\n        },\n        summary: description || 'No description available',\n        complexity: {\n          wordCount: 0,\n          complexity: 'Unknown'\n        },\n        tips: ['Try again later'],\n        metadata: {\n          error: error.message\n        }\n      };\n    }\n  }\n}\n\n// Create a single instance and export it\nconst aiService = new AIService();\nexport default aiService;","map":{"version":3,"names":["AIService","constructor","backendURL","isLoading","analyzeImage","imageUrl","description","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","result","json","success","data","error","console","imageAnalysis","sentiment","label","score","summary","complexity","wordCount","tips","analyzeTextComplexity","text","sentenceCount","avgWordsPerSentence","words","split","filter","word","length","sentences","sentence","trim","Math","round","generateAstronomyTips","topic","nebula","galaxy","planet","mars","meteor","satellite","default","topicLower","toLowerCase","key","Object","keys","find","k","includes","analyzeSentiment","positiveWords","negativeWords","textLower","positiveCount","negativeCount","summarizeText","maxLength","truncated","substring","lastSpace","lastIndexOf","isAvailable","comprehensiveAnalysis","title","analysisText","metadata","hasImage","hasDescription","hasTitle","analysisMethod","message","aiService"],"sources":["/Users/aishikasaha/Documents/nasa-react-express-app/frontend/src/services/aiService.js"],"sourcesContent":["// AI Service that uses backend proxy to avoid CORS issues\nclass AIService {\n  constructor() {\n    this.backendURL = 'http://localhost:5000';\n    this.isLoading = false;\n  }\n\n  // Image analysis using backend proxy\n  async analyzeImage(imageUrl, description = '') {\n    try {\n      this.isLoading = true;\n      \n      // Call your backend instead of external APIs\n      const response = await fetch(`${this.backendURL}/api/analyze-image`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          imageUrl,\n          description\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        return result.data;\n      } else {\n        throw new Error(result.error);\n      }\n      \n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return {\n        imageAnalysis: 'AI analysis temporarily unavailable',\n        sentiment: { label: 'NEUTRAL', score: 0.5 },\n        summary: description || 'Unable to analyze image',\n        complexity: { wordCount: 0, complexity: 'Unknown' },\n        tips: ['AI analysis is currently unavailable']\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Local browser-based text analysis (no API needed)\n  analyzeTextComplexity(text) {\n    if (!text) return { wordCount: 0, sentenceCount: 0, avgWordsPerSentence: 0, complexity: 'Unknown' };\n    \n    const words = text.split(/\\s+/).filter(word => word.length > 0).length;\n    const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0).length;\n    const avgWordsPerSentence = sentences > 0 ? words / sentences : 0;\n    \n    let complexity = 'Simple';\n    if (avgWordsPerSentence > 15) complexity = 'Moderate';\n    if (avgWordsPerSentence > 25) complexity = 'Complex';\n    \n    return {\n      wordCount: words,\n      sentenceCount: sentences,\n      avgWordsPerSentence: Math.round(avgWordsPerSentence * 10) / 10,\n      complexity\n    };\n  }\n\n  // Generate astronomy-related suggestions\n  generateAstronomyTips(topic = '') {\n    const tips = {\n      nebula: [\n        \"🔭 Try viewing nebulae with different filters to see various elements\",\n        \"🌟 Nebulae are stellar nurseries where new stars are born\",\n        \"📊 The colors in nebulae indicate different chemical elements\"\n      ],\n      galaxy: [\n        \"🌌 Our Milky Way contains over 100 billion stars\",\n        \"🔄 Galaxies rotate, with spiral arms moving like waves\",\n        \"🎯 Look for the galaxy's central black hole in deep images\"\n      ],\n      planet: [\n        \"🪐 Each planet has unique atmospheric conditions\",\n        \"🌡️ Temperature varies greatly across planetary surfaces\",\n        \"🔍 Study surface features to understand geological history\"\n      ],\n      mars: [\n        \"🚀 Mars has the largest volcano in the solar system\",\n        \"❄️ Mars has polar ice caps made of water and dry ice\",\n        \"🌪️ Dust storms on Mars can last for months\"\n      ],\n      meteor: [\n        \"☄️ Most meteors are tiny particles that burn up in our atmosphere\",\n        \"🌌 Meteor showers occur when Earth passes through comet debris\",\n        \"📅 Annual meteor showers happen at predictable times\"\n      ],\n      satellite: [\n        \"🛰️ Satellites appear as moving points of light in the night sky\",\n        \"🕐 The International Space Station is visible to the naked eye\",\n        \"📡 Many satellites are in geostationary orbit above the equator\"\n      ],\n      default: [\n        \"⭐ Use dark sky locations for better astronomical viewing\",\n        \"📱 Try astronomy apps to identify objects in the night sky\",\n        \"🌙 The best viewing is often just after sunset or before sunrise\"\n      ]\n    };\n    \n    const topicLower = topic.toLowerCase();\n    const key = Object.keys(tips).find(k => topicLower.includes(k)) || 'default';\n    return tips[key];\n  }\n\n  // Mock sentiment analysis\n  analyzeSentiment(text) {\n    if (!text) return { label: 'NEUTRAL', score: 0.5 };\n    \n    const positiveWords = ['beautiful', 'amazing', 'spectacular', 'stunning', 'magnificent', 'wonderful'];\n    const negativeWords = ['dark', 'void', 'empty', 'cold', 'distant'];\n    \n    const textLower = text.toLowerCase();\n    const positiveCount = positiveWords.filter(word => textLower.includes(word)).length;\n    const negativeCount = negativeWords.filter(word => textLower.includes(word)).length;\n    \n    if (positiveCount > negativeCount) {\n      return { label: 'POSITIVE', score: 0.7 + (positiveCount * 0.1) };\n    } else if (negativeCount > positiveCount) {\n      return { label: 'NEGATIVE', score: 0.3 - (negativeCount * 0.1) };\n    } else {\n      return { label: 'NEUTRAL', score: 0.5 };\n    }\n  }\n\n  // Simple text summarization\n  summarizeText(text, maxLength = 100) {\n    if (!text || text.length <= maxLength) return text;\n    \n    // Simple truncation with word boundary\n    const truncated = text.substring(0, maxLength);\n    const lastSpace = truncated.lastIndexOf(' ');\n    \n    if (lastSpace > maxLength * 0.8) {\n      return truncated.substring(0, lastSpace) + '...';\n    } else {\n      return truncated + '...';\n    }\n  }\n\n  // Check if AI services are available\n  isAvailable() {\n    return true; // Using mock/local analysis, always available\n  }\n\n  // Comprehensive analysis combining all methods\n  async comprehensiveAnalysis(imageUrl, description = '', title = '') {\n    try {\n      const analysisText = `${title} ${description}`.trim();\n      \n      // Use local analysis methods\n      const complexity = this.analyzeTextComplexity(analysisText);\n      const sentiment = this.analyzeSentiment(analysisText);\n      const summary = this.summarizeText(description, 150);\n      const tips = this.generateAstronomyTips(analysisText);\n      \n      return {\n        imageAnalysis: `Analysis of \"${title}\": This astronomical image showcases ${summary}`,\n        sentiment,\n        summary,\n        complexity,\n        tips,\n        metadata: {\n          hasImage: !!imageUrl,\n          hasDescription: !!description,\n          hasTitle: !!title,\n          analysisMethod: 'local'\n        }\n      };\n    } catch (error) {\n      console.error('Comprehensive analysis error:', error);\n      return {\n        imageAnalysis: 'Analysis temporarily unavailable',\n        sentiment: { label: 'NEUTRAL', score: 0.5 },\n        summary: description || 'No description available',\n        complexity: { wordCount: 0, complexity: 'Unknown' },\n        tips: ['Try again later'],\n        metadata: { error: error.message }\n      };\n    }\n  }\n}\n\n// Create a single instance and export it\nconst aiService = new AIService();\nexport default aiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}