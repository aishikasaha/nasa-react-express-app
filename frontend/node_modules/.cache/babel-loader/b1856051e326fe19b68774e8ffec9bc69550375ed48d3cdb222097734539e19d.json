{"ast":null,"code":"export const ROVERS=[{value:'curiosity',label:'Curiosity',maxSol:4000},{value:'opportunity',label:'Opportunity',maxSol:5111},{value:'spirit',label:'Spirit',maxSol:2208},{value:'perseverance',label:'Perseverance',maxSol:1000}];export const API_ENDPOINTS={APOD:'/apod',MARS_PHOTOS:'/mars/photos',NEO:'/neo',SEARCH:'/search'};export const ERROR_MESSAGES={NETWORK_ERROR:'Network error. Please check your connection.',API_ERROR:'Unable to fetch data from NASA API.',RATE_LIMIT:'Rate limit exceeded. Please try again later.',UNKNOWN_ERROR:'An unexpected error occurred.'};export const DATE_UTILS={formatDate:date=>{return new Date(date).toLocaleDateString('en-US',{year:'numeric',month:'long',day:'numeric'});},getRandomPastDate:function(){let daysBack=arguments.length>0&&arguments[0]!==undefined?arguments[0]:365;const randomDate=new Date();randomDate.setDate(randomDate.getDate()-Math.floor(Math.random()*daysBack));return randomDate.toISOString().split('T')[0];},getTodayString:()=>{return new Date().toISOString().split('T')[0];},getDateRange:function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;const start=new Date().toISOString().split('T')[0];const end=new Date(Date.now()+days*24*60*60*1000).toISOString().split('T')[0];return{start,end};}};","map":{"version":3,"names":["ROVERS","value","label","maxSol","API_ENDPOINTS","APOD","MARS_PHOTOS","NEO","SEARCH","ERROR_MESSAGES","NETWORK_ERROR","API_ERROR","RATE_LIMIT","UNKNOWN_ERROR","DATE_UTILS","formatDate","date","Date","toLocaleDateString","year","month","day","getRandomPastDate","daysBack","arguments","length","undefined","randomDate","setDate","getDate","Math","floor","random","toISOString","split","getTodayString","getDateRange","days","start","end","now"],"sources":["/Users/aishikasaha/Documents/nasa-react-express-app/frontend/src/utils/constants.js"],"sourcesContent":["export const ROVERS = [\n  { value: 'curiosity', label: 'Curiosity', maxSol: 4000 },\n  { value: 'opportunity', label: 'Opportunity', maxSol: 5111 },\n  { value: 'spirit', label: 'Spirit', maxSol: 2208 },\n  { value: 'perseverance', label: 'Perseverance', maxSol: 1000 }\n];\n\nexport const API_ENDPOINTS = {\n  APOD: '/apod',\n  MARS_PHOTOS: '/mars/photos',\n  NEO: '/neo',\n  SEARCH: '/search'\n};\n\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  API_ERROR: 'Unable to fetch data from NASA API.',\n  RATE_LIMIT: 'Rate limit exceeded. Please try again later.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.'\n};\n\nexport const DATE_UTILS = {\n  formatDate: (date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  },\n  \n  getRandomPastDate: (daysBack = 365) => {\n    const randomDate = new Date();\n    randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * daysBack));\n    return randomDate.toISOString().split('T')[0];\n  },\n  \n  getTodayString: () => {\n    return new Date().toISOString().split('T')[0];\n  },\n  \n  getDateRange: (days = 7) => {\n    const start = new Date().toISOString().split('T')[0];\n    const end = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    return { start, end };\n  }\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,MAAM,CAAG,CACpB,CAAEC,KAAK,CAAE,WAAW,CAAEC,KAAK,CAAE,WAAW,CAAEC,MAAM,CAAE,IAAK,CAAC,CACxD,CAAEF,KAAK,CAAE,aAAa,CAAEC,KAAK,CAAE,aAAa,CAAEC,MAAM,CAAE,IAAK,CAAC,CAC5D,CAAEF,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,IAAK,CAAC,CAClD,CAAEF,KAAK,CAAE,cAAc,CAAEC,KAAK,CAAE,cAAc,CAAEC,MAAM,CAAE,IAAK,CAAC,CAC/D,CAED,MAAO,MAAM,CAAAC,aAAa,CAAG,CAC3BC,IAAI,CAAE,OAAO,CACbC,WAAW,CAAE,cAAc,CAC3BC,GAAG,CAAE,MAAM,CACXC,MAAM,CAAE,SACV,CAAC,CAED,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5BC,aAAa,CAAE,8CAA8C,CAC7DC,SAAS,CAAE,qCAAqC,CAChDC,UAAU,CAAE,8CAA8C,CAC1DC,aAAa,CAAE,+BACjB,CAAC,CAED,MAAO,MAAM,CAAAC,UAAU,CAAG,CACxBC,UAAU,CAAGC,IAAI,EAAK,CACpB,MAAO,IAAI,CAAAC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAE,CAChDC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,MAAM,CACbC,GAAG,CAAE,SACP,CAAC,CAAC,CACJ,CAAC,CAEDC,iBAAiB,CAAE,QAAAA,CAAA,CAAoB,IAAnB,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAChC,KAAM,CAAAG,UAAU,CAAG,GAAI,CAAAV,IAAI,CAAC,CAAC,CAC7BU,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAC/E,MAAO,CAAAI,UAAU,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC,CAEDC,cAAc,CAAEA,CAAA,GAAM,CACpB,MAAO,IAAI,CAAAlB,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC,CAEDE,YAAY,CAAE,QAAAA,CAAA,CAAc,IAAb,CAAAC,IAAI,CAAAb,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACrB,KAAM,CAAAc,KAAK,CAAG,GAAI,CAAArB,IAAI,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACpD,KAAM,CAAAK,GAAG,CAAG,GAAI,CAAAtB,IAAI,CAACA,IAAI,CAACuB,GAAG,CAAC,CAAC,CAAGH,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACJ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACzF,MAAO,CAAEI,KAAK,CAAEC,GAAI,CAAC,CACvB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}