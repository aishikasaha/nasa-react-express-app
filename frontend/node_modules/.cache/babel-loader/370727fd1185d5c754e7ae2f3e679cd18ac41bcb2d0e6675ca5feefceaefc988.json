{"ast":null,"code":"export const ROVERS = [{\n  value: 'curiosity',\n  label: 'Curiosity',\n  maxSol: 4000\n}, {\n  value: 'opportunity',\n  label: 'Opportunity',\n  maxSol: 5111\n}, {\n  value: 'spirit',\n  label: 'Spirit',\n  maxSol: 2208\n}, {\n  value: 'perseverance',\n  label: 'Perseverance',\n  maxSol: 1000\n}];\nexport const API_ENDPOINTS = {\n  APOD: '/apod',\n  MARS_PHOTOS: '/mars/photos',\n  NEO: '/neo',\n  SEARCH: '/search'\n};\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  API_ERROR: 'Unable to fetch data from NASA API.',\n  RATE_LIMIT: 'Rate limit exceeded. Please try again later.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.'\n};\nexport const DATE_UTILS = {\n  formatDate: date => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  },\n  getRandomPastDate: (daysBack = 365) => {\n    const randomDate = new Date();\n    randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * daysBack));\n    return randomDate.toISOString().split('T')[0];\n  },\n  getTodayString: () => {\n    return new Date().toISOString().split('T')[0];\n  },\n  getDateRange: (days = 7) => {\n    const start = new Date().toISOString().split('T')[0];\n    const end = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    return {\n      start,\n      end\n    };\n  }\n};","map":{"version":3,"names":["ROVERS","value","label","maxSol","API_ENDPOINTS","APOD","MARS_PHOTOS","NEO","SEARCH","ERROR_MESSAGES","NETWORK_ERROR","API_ERROR","RATE_LIMIT","UNKNOWN_ERROR","DATE_UTILS","formatDate","date","Date","toLocaleDateString","year","month","day","getRandomPastDate","daysBack","randomDate","setDate","getDate","Math","floor","random","toISOString","split","getTodayString","getDateRange","days","start","end","now"],"sources":["/Users/aishikasaha/Downloads/react-nasa-api-master copy/frontend/src/utils/constants.js"],"sourcesContent":["export const ROVERS = [\n  { value: 'curiosity', label: 'Curiosity', maxSol: 4000 },\n  { value: 'opportunity', label: 'Opportunity', maxSol: 5111 },\n  { value: 'spirit', label: 'Spirit', maxSol: 2208 },\n  { value: 'perseverance', label: 'Perseverance', maxSol: 1000 }\n];\n\nexport const API_ENDPOINTS = {\n  APOD: '/apod',\n  MARS_PHOTOS: '/mars/photos',\n  NEO: '/neo',\n  SEARCH: '/search'\n};\n\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  API_ERROR: 'Unable to fetch data from NASA API.',\n  RATE_LIMIT: 'Rate limit exceeded. Please try again later.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.'\n};\n\nexport const DATE_UTILS = {\n  formatDate: (date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  },\n  \n  getRandomPastDate: (daysBack = 365) => {\n    const randomDate = new Date();\n    randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * daysBack));\n    return randomDate.toISOString().split('T')[0];\n  },\n  \n  getTodayString: () => {\n    return new Date().toISOString().split('T')[0];\n  },\n  \n  getDateRange: (days = 7) => {\n    const start = new Date().toISOString().split('T')[0];\n    const end = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    return { start, end };\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,CACpB;EAAEC,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,WAAW;EAAEC,MAAM,EAAE;AAAK,CAAC,EACxD;EAAEF,KAAK,EAAE,aAAa;EAAEC,KAAK,EAAE,aAAa;EAAEC,MAAM,EAAE;AAAK,CAAC,EAC5D;EAAEF,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE,QAAQ;EAAEC,MAAM,EAAE;AAAK,CAAC,EAClD;EAAEF,KAAK,EAAE,cAAc;EAAEC,KAAK,EAAE,cAAc;EAAEC,MAAM,EAAE;AAAK,CAAC,CAC/D;AAED,OAAO,MAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,OAAO;EACbC,WAAW,EAAE,cAAc;EAC3BC,GAAG,EAAE,MAAM;EACXC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG;EAC5BC,aAAa,EAAE,8CAA8C;EAC7DC,SAAS,EAAE,qCAAqC;EAChDC,UAAU,EAAE,8CAA8C;EAC1DC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG;EACxBC,UAAU,EAAGC,IAAI,IAAK;IACpB,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;MAChDC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC;EAEDC,iBAAiB,EAAEA,CAACC,QAAQ,GAAG,GAAG,KAAK;IACrC,MAAMC,UAAU,GAAG,IAAIP,IAAI,CAAC,CAAC;IAC7BO,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,QAAQ,CAAC,CAAC;IAC/E,OAAOC,UAAU,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,OAAO,IAAIf,IAAI,CAAC,CAAC,CAACa,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;EAEDE,YAAY,EAAEA,CAACC,IAAI,GAAG,CAAC,KAAK;IAC1B,MAAMC,KAAK,GAAG,IAAIlB,IAAI,CAAC,CAAC,CAACa,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,MAAMK,GAAG,GAAG,IAAInB,IAAI,CAACA,IAAI,CAACoB,GAAG,CAAC,CAAC,GAAGH,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACJ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzF,OAAO;MAAEI,KAAK;MAAEC;IAAI,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}