{"ast":null,"code":"import axios from 'axios';\n\n// Updated API base URL configuration for separate deployments\nconst getAPIBaseURL = () => {\n  if (process.env.NODE_ENV === 'production') {\n    // Use environment variable or fallback to your backend URL\n    return process.env.REACT_APP_API_URL || 'https://nasa-react-express-app.onrender.com';\n  }\n\n  // For local development\n  return 'http://localhost:5001';\n};\nconst API_BASE_URL = getAPIBaseURL();\nconsole.log('🌍 Environment:', process.env.NODE_ENV);\nconsole.log('🔗 API Base URL:', API_BASE_URL);\nconsole.log('🔧 Environment Variable:', process.env.REACT_APP_API_URL);\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 45000,\n  // Increased timeout for NASA API and Render cold starts\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  // Important for CORS with separate deployments\n  withCredentials: false // Set to false for separate domains unless you need cookies\n});\n\n// Request interceptor for logging and debugging\napi.interceptors.request.use(config => {\n  var _config$method;\n  const fullUrl = `${config.baseURL}${config.url}`;\n  console.log(`🚀 Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${fullUrl}`);\n  console.log('📋 Request details:', {\n    method: config.method,\n    url: config.url,\n    baseURL: config.baseURL,\n    params: config.params,\n    headers: config.headers,\n    timeout: config.timeout\n  });\n  return config;\n}, error => {\n  console.error('❌ Request setup error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling and debugging\napi.interceptors.response.use(response => {\n  console.log('✅ API Response received:', {\n    status: response.status,\n    statusText: response.statusText,\n    url: response.config.url,\n    dataPreview: response.data.success ? 'Success' : 'Data received'\n  });\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$config, _error$config2, _error$response4, _error$response5, _error$response6, _error$response7, _error$response8, _error$response8$data, _error$response9, _error$response9$data;\n  console.error('❌ API Error Details:', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    baseURL: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.baseURL,\n    message: error.message,\n    code: error.code\n  });\n\n  // Handle specific error cases\n  if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout. The server might be sleeping (Render cold start). Please try again.');\n  }\n  if (error.code === 'ERR_NETWORK') {\n    throw new Error(`Network error: Cannot connect to ${API_BASE_URL}. Check if backend is running.`);\n  }\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 429) {\n    throw new Error('Rate limit exceeded. Please try again later.');\n  }\n  if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) >= 500) {\n    throw new Error('Server error. Please try again later.');\n  }\n  if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 404) {\n    throw new Error('API endpoint not found. Please check the backend server.');\n  }\n  if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 0) {\n    throw new Error('CORS error: Backend not allowing frontend domain. Check CORS configuration.');\n  }\n\n  // Return the actual error message from the API\n  const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || error.message || 'Unknown error occurred';\n  throw new Error(errorMessage);\n});\n\n// Health check function to test API connectivity\nexport const testAPIConnection = async () => {\n  try {\n    console.log('🔍 Testing API connection...');\n    const response = await api.get('/api/health');\n    console.log('✅ API connection successful:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ API connection test failed:', error);\n    throw error;\n  }\n};\n\n// API methods with detailed logging\nexport const nasaAPI = {\n  // Health check\n  healthCheck: async () => {\n    console.log('🏥 Health check');\n    return api.get('/api/health');\n  },\n  // APOD endpoints\n  getAPOD: async date => {\n    console.log('📡 Fetching APOD for date:', date || 'today');\n    return api.get('/api/apod', {\n      params: date ? {\n        date\n      } : {}\n    });\n  },\n  getRandomAPOD: async () => {\n    console.log('🎲 Fetching random APOD');\n    return api.get('/api/apod/random');\n  },\n  // Mars rover endpoints\n  getMarsPhotos: async (rover = 'curiosity', sol = 1000, page = 1) => {\n    console.log('🚀 Fetching Mars photos:', {\n      rover,\n      sol,\n      page\n    });\n    return api.get('/api/mars/photos', {\n      params: {\n        rover,\n        sol,\n        page\n      },\n      timeout: 60000 // Mars photos can take longer\n    });\n  },\n  // Near Earth Objects\n  getNearEarthObjects: async (startDate, endDate) => {\n    console.log('☄️ Fetching NEO data:', {\n      startDate,\n      endDate\n    });\n    const params = {};\n    if (startDate) params.start_date = startDate;\n    if (endDate) params.end_date = endDate;\n    return api.get('/api/neo', {\n      params\n    });\n  },\n  // NASA Library search\n  searchLibrary: async (query, mediaType = 'image') => {\n    console.log('🔍 Searching NASA library:', {\n      query,\n      mediaType\n    });\n    if (!query) {\n      throw new Error('Search query is required');\n    }\n    return api.get('/api/search', {\n      params: {\n        q: query,\n        media_type: mediaType\n      },\n      timeout: 60000 // Search can take longer\n    });\n  }\n};\n\n// Debug function to check configuration\nexport const debugAPIConfig = () => {\n  console.log('🔧 API Configuration Debug:', {\n    environment: process.env.NODE_ENV,\n    apiBaseURL: API_BASE_URL,\n    environmentVariable: process.env.REACT_APP_API_URL,\n    currentDomain: window.location.origin,\n    userAgent: navigator.userAgent,\n    axiosDefaults: {\n      baseURL: api.defaults.baseURL,\n      timeout: api.defaults.timeout,\n      headers: api.defaults.headers\n    }\n  });\n};\n\n// Wake up function for Render free tier (to handle cold starts)\nexport const wakeUpBackend = async () => {\n  try {\n    console.log('☕ Waking up backend (Render cold start)...');\n    await testAPIConnection();\n    console.log('✅ Backend is awake and ready!');\n    return true;\n  } catch (error) {\n    console.log('⏰ Backend might be cold starting, waiting...');\n    // Wait a bit and try again\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    try {\n      await testAPIConnection();\n      console.log('✅ Backend is now awake!');\n      return true;\n    } catch (retryError) {\n      console.error('❌ Backend wake up failed:', retryError);\n      return false;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getAPIBaseURL","process","env","NODE_ENV","REACT_APP_API_URL","API_BASE_URL","console","log","api","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","_config$method","fullUrl","url","method","toUpperCase","params","error","Promise","reject","response","status","statusText","dataPreview","data","success","_error$response","_error$response2","_error$response3","_error$config","_error$config2","_error$response4","_error$response5","_error$response6","_error$response7","_error$response8","_error$response8$data","_error$response9","_error$response9$data","message","code","Error","errorMessage","testAPIConnection","get","nasaAPI","healthCheck","getAPOD","date","getRandomAPOD","getMarsPhotos","rover","sol","page","getNearEarthObjects","startDate","endDate","start_date","end_date","searchLibrary","query","mediaType","q","media_type","debugAPIConfig","environment","apiBaseURL","environmentVariable","currentDomain","window","location","origin","userAgent","navigator","axiosDefaults","defaults","wakeUpBackend","resolve","setTimeout","retryError"],"sources":["/Users/aishikasaha/Documents/nasa-react-express-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Updated API base URL configuration for separate deployments\nconst getAPIBaseURL = () => {\n  if (process.env.NODE_ENV === 'production') {\n    // Use environment variable or fallback to your backend URL\n    return process.env.REACT_APP_API_URL || 'https://nasa-react-express-app.onrender.com';\n  }\n  \n  // For local development\n  return 'http://localhost:5001';\n};\n\nconst API_BASE_URL = getAPIBaseURL();\n\nconsole.log('🌍 Environment:', process.env.NODE_ENV);\nconsole.log('🔗 API Base URL:', API_BASE_URL);\nconsole.log('🔧 Environment Variable:', process.env.REACT_APP_API_URL);\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 45000, // Increased timeout for NASA API and Render cold starts\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  // Important for CORS with separate deployments\n  withCredentials: false, // Set to false for separate domains unless you need cookies\n});\n\n// Request interceptor for logging and debugging\napi.interceptors.request.use(\n  (config) => {\n    const fullUrl = `${config.baseURL}${config.url}`;\n    console.log(`🚀 Making ${config.method?.toUpperCase()} request to ${fullUrl}`);\n    console.log('📋 Request details:', {\n      method: config.method,\n      url: config.url,\n      baseURL: config.baseURL,\n      params: config.params,\n      headers: config.headers,\n      timeout: config.timeout\n    });\n    return config;\n  },\n  (error) => {\n    console.error('❌ Request setup error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling and debugging\napi.interceptors.response.use(\n  (response) => {\n    console.log('✅ API Response received:', {\n      status: response.status,\n      statusText: response.statusText,\n      url: response.config.url,\n      dataPreview: response.data.success ? 'Success' : 'Data received'\n    });\n    return response;\n  },\n  (error) => {\n    console.error('❌ API Error Details:', {\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data,\n      url: error.config?.url,\n      baseURL: error.config?.baseURL,\n      message: error.message,\n      code: error.code\n    });\n\n    // Handle specific error cases\n    if (error.code === 'ECONNABORTED') {\n      throw new Error('Request timeout. The server might be sleeping (Render cold start). Please try again.');\n    }\n\n    if (error.code === 'ERR_NETWORK') {\n      throw new Error(`Network error: Cannot connect to ${API_BASE_URL}. Check if backend is running.`);\n    }\n\n    if (error.response?.status === 429) {\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n\n    if (error.response?.status >= 500) {\n      throw new Error('Server error. Please try again later.');\n    }\n\n    if (error.response?.status === 404) {\n      throw new Error('API endpoint not found. Please check the backend server.');\n    }\n\n    if (error.response?.status === 0) {\n      throw new Error('CORS error: Backend not allowing frontend domain. Check CORS configuration.');\n    }\n\n    // Return the actual error message from the API\n    const errorMessage = error.response?.data?.error || \n                        error.response?.data?.message || \n                        error.message || \n                        'Unknown error occurred';\n    throw new Error(errorMessage);\n  }\n);\n\n// Health check function to test API connectivity\nexport const testAPIConnection = async () => {\n  try {\n    console.log('🔍 Testing API connection...');\n    const response = await api.get('/api/health');\n    console.log('✅ API connection successful:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ API connection test failed:', error);\n    throw error;\n  }\n};\n\n// API methods with detailed logging\nexport const nasaAPI = {\n  // Health check\n  healthCheck: async () => {\n    console.log('🏥 Health check');\n    return api.get('/api/health');\n  },\n\n  // APOD endpoints\n  getAPOD: async (date) => {\n    console.log('📡 Fetching APOD for date:', date || 'today');\n    return api.get('/api/apod', { params: date ? { date } : {} });\n  },\n\n  getRandomAPOD: async () => {\n    console.log('🎲 Fetching random APOD');\n    return api.get('/api/apod/random');\n  },\n\n  // Mars rover endpoints\n  getMarsPhotos: async (rover = 'curiosity', sol = 1000, page = 1) => {\n    console.log('🚀 Fetching Mars photos:', { rover, sol, page });\n    return api.get('/api/mars/photos', { \n      params: { rover, sol, page },\n      timeout: 60000 // Mars photos can take longer\n    });\n  },\n\n  // Near Earth Objects\n  getNearEarthObjects: async (startDate, endDate) => {\n    console.log('☄️ Fetching NEO data:', { startDate, endDate });\n    const params = {};\n    if (startDate) params.start_date = startDate;\n    if (endDate) params.end_date = endDate;\n    return api.get('/api/neo', { params });\n  },\n\n  // NASA Library search\n  searchLibrary: async (query, mediaType = 'image') => {\n    console.log('🔍 Searching NASA library:', { query, mediaType });\n    if (!query) {\n      throw new Error('Search query is required');\n    }\n    return api.get('/api/search', { \n      params: { q: query, media_type: mediaType },\n      timeout: 60000 // Search can take longer\n    });\n  }\n};\n\n// Debug function to check configuration\nexport const debugAPIConfig = () => {\n  console.log('🔧 API Configuration Debug:', {\n    environment: process.env.NODE_ENV,\n    apiBaseURL: API_BASE_URL,\n    environmentVariable: process.env.REACT_APP_API_URL,\n    currentDomain: window.location.origin,\n    userAgent: navigator.userAgent,\n    axiosDefaults: {\n      baseURL: api.defaults.baseURL,\n      timeout: api.defaults.timeout,\n      headers: api.defaults.headers\n    }\n  });\n};\n\n// Wake up function for Render free tier (to handle cold starts)\nexport const wakeUpBackend = async () => {\n  try {\n    console.log('☕ Waking up backend (Render cold start)...');\n    await testAPIConnection();\n    console.log('✅ Backend is awake and ready!');\n    return true;\n  } catch (error) {\n    console.log('⏰ Backend might be cold starting, waiting...');\n    // Wait a bit and try again\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    try {\n      await testAPIConnection();\n      console.log('✅ Backend is now awake!');\n      return true;\n    } catch (retryError) {\n      console.error('❌ Backend wake up failed:', retryError);\n      return false;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}