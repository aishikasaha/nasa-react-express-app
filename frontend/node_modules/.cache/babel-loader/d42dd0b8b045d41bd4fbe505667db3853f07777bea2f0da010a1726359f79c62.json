{"ast":null,"code":"// Using Hugging Face's free inference API\nclass AIService {\n  constructor() {\n    this.HF_API_URL = 'https://api-inference.huggingface.co/models';\n    this.isLoading = false;\n  }\n\n  // Image captioning using BLIP model (free)\n  async analyzeImage(imageUrl) {\n    try {\n      var _data$;\n      this.isLoading = true;\n\n      // Convert image URL to blob\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n\n      // Send to Hugging Face API\n      const result = await fetch(`${this.HF_API_URL}/Salesforce/blip-image-captioning-large`, {\n        method: 'POST',\n        body: blob,\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        }\n      });\n      const data = await result.json();\n      return ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.generated_text) || 'Unable to analyze image';\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return 'AI analysis temporarily unavailable';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Text summarization using free model\n  async summarizeText(text, maxLength = 100) {\n    try {\n      var _data$2;\n      if (text.length < maxLength) return text;\n      const response = await fetch(`${this.HF_API_URL}/facebook/bart-large-cnn`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          inputs: text,\n          parameters: {\n            max_length: maxLength,\n            min_length: 20\n          }\n        })\n      });\n      const data = await response.json();\n      return ((_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.summary_text) || text;\n    } catch (error) {\n      console.error('AI Summarization Error:', error);\n      return text;\n    }\n  }\n\n  // Sentiment analysis for text\n  async analyzeSentiment(text) {\n    try {\n      const response = await fetch(`${this.HF_API_URL}/cardiffnlp/twitter-roberta-base-sentiment-latest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          inputs: text\n        })\n      });\n      const data = await response.json();\n      return data[0] || {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    } catch (error) {\n      console.error('AI Sentiment Analysis Error:', error);\n      return {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    }\n  }\n\n  // Local browser-based text analysis (no API needed)\n  analyzeTextComplexity(text) {\n    const words = text.split(/\\s+/).length;\n    const sentences = text.split(/[.!?]+/).length;\n    const avgWordsPerSentence = words / sentences;\n    let complexity = 'Simple';\n    if (avgWordsPerSentence > 15) complexity = 'Moderate';\n    if (avgWordsPerSentence > 25) complexity = 'Complex';\n    return {\n      wordCount: words,\n      sentenceCount: sentences,\n      avgWordsPerSentence: Math.round(avgWordsPerSentence),\n      complexity\n    };\n  }\n\n  // Generate astronomy-related suggestions\n  generateAstronomyTips(topic) {\n    const tips = {\n      nebula: [\"🔭 Try viewing nebulae with different filters to see various elements\", \"🌟 Nebulae are stellar nurseries where new stars are born\", \"📊 The colors in nebulae indicate different chemical elements\"],\n      galaxy: [\"🌌 Our Milky Way contains over 100 billion stars\", \"🔄 Galaxies rotate, with spiral arms moving like waves\", \"🎯 Look for the galaxy's central black hole in deep images\"],\n      planet: [\"🪐 Each planet has unique atmospheric conditions\", \"🌡️ Temperature varies greatly across planetary surfaces\", \"🔍 Study surface features to understand geological history\"],\n      mars: [\"🚀 Mars has the largest volcano in the solar system\", \"❄️ Mars has polar ice caps made of water and dry ice\", \"🌪️ Dust storms on Mars can last for months\"],\n      default: [\"⭐ Use dark sky locations for better astronomical viewing\", \"📱 Try astronomy apps to identify objects in the night sky\", \"🌙 The best viewing is often just after sunset or before sunrise\"]\n    };\n    const key = Object.keys(tips).find(k => topic.toLowerCase().includes(k)) || 'default';\n    return tips[key];\n  }\n}\nexport default new AIService();","map":{"version":3,"names":["AIService","constructor","HF_API_URL","isLoading","analyzeImage","imageUrl","_data$","response","fetch","blob","result","method","body","headers","data","json","generated_text","error","console","summarizeText","text","maxLength","_data$2","length","JSON","stringify","inputs","parameters","max_length","min_length","summary_text","analyzeSentiment","label","score","analyzeTextComplexity","words","split","sentences","avgWordsPerSentence","complexity","wordCount","sentenceCount","Math","round","generateAstronomyTips","topic","tips","nebula","galaxy","planet","mars","default","key","Object","keys","find","k","toLowerCase","includes"],"sources":["/Users/aishikasaha/Downloads/react-nasa-api-master copy/frontend/src/services/aiService.js"],"sourcesContent":["// Using Hugging Face's free inference API\nclass AIService {\n  constructor() {\n    this.HF_API_URL = 'https://api-inference.huggingface.co/models';\n    this.isLoading = false;\n  }\n\n  // Image captioning using BLIP model (free)\n  async analyzeImage(imageUrl) {\n    try {\n      this.isLoading = true;\n      \n      // Convert image URL to blob\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      \n      // Send to Hugging Face API\n      const result = await fetch(`${this.HF_API_URL}/Salesforce/blip-image-captioning-large`, {\n        method: 'POST',\n        body: blob,\n        headers: {\n          'Content-Type': 'application/octet-stream',\n        }\n      });\n      \n      const data = await result.json();\n      return data[0]?.generated_text || 'Unable to analyze image';\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return 'AI analysis temporarily unavailable';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Text summarization using free model\n  async summarizeText(text, maxLength = 100) {\n    try {\n      if (text.length < maxLength) return text;\n      \n      const response = await fetch(`${this.HF_API_URL}/facebook/bart-large-cnn`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          inputs: text,\n          parameters: {\n            max_length: maxLength,\n            min_length: 20\n          }\n        })\n      });\n      \n      const data = await response.json();\n      return data[0]?.summary_text || text;\n    } catch (error) {\n      console.error('AI Summarization Error:', error);\n      return text;\n    }\n  }\n\n  // Sentiment analysis for text\n  async analyzeSentiment(text) {\n    try {\n      const response = await fetch(`${this.HF_API_URL}/cardiffnlp/twitter-roberta-base-sentiment-latest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ inputs: text })\n      });\n      \n      const data = await response.json();\n      return data[0] || { label: 'NEUTRAL', score: 0.5 };\n    } catch (error) {\n      console.error('AI Sentiment Analysis Error:', error);\n      return { label: 'NEUTRAL', score: 0.5 };\n    }\n  }\n\n  \n  // Local browser-based text analysis (no API needed)\n  analyzeTextComplexity(text) {\n    const words = text.split(/\\s+/).length;\n    const sentences = text.split(/[.!?]+/).length;\n    const avgWordsPerSentence = words / sentences;\n    \n    let complexity = 'Simple';\n    if (avgWordsPerSentence > 15) complexity = 'Moderate';\n    if (avgWordsPerSentence > 25) complexity = 'Complex';\n    \n    return {\n      wordCount: words,\n      sentenceCount: sentences,\n      avgWordsPerSentence: Math.round(avgWordsPerSentence),\n      complexity\n    };\n  }\n\n  // Generate astronomy-related suggestions\n  generateAstronomyTips(topic) {\n    const tips = {\n      nebula: [\n        \"🔭 Try viewing nebulae with different filters to see various elements\",\n        \"🌟 Nebulae are stellar nurseries where new stars are born\",\n        \"📊 The colors in nebulae indicate different chemical elements\"\n      ],\n      galaxy: [\n        \"🌌 Our Milky Way contains over 100 billion stars\",\n        \"🔄 Galaxies rotate, with spiral arms moving like waves\",\n        \"🎯 Look for the galaxy's central black hole in deep images\"\n      ],\n      planet: [\n        \"🪐 Each planet has unique atmospheric conditions\",\n        \"🌡️ Temperature varies greatly across planetary surfaces\",\n        \"🔍 Study surface features to understand geological history\"\n      ],\n      mars: [\n        \"🚀 Mars has the largest volcano in the solar system\",\n        \"❄️ Mars has polar ice caps made of water and dry ice\",\n        \"🌪️ Dust storms on Mars can last for months\"\n      ],\n      default: [\n        \"⭐ Use dark sky locations for better astronomical viewing\",\n        \"📱 Try astronomy apps to identify objects in the night sky\",\n        \"🌙 The best viewing is often just after sunset or before sunrise\"\n      ]\n    };\n    \n    const key = Object.keys(tips).find(k => topic.toLowerCase().includes(k)) || 'default';\n    return tips[key];\n  }\n}\n\nexport default new AIService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}